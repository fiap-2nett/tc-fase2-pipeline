name: tc-fase2-pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOTNET_VERSION: '7.0.x'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore TechChallenge.sln

      - name: Build
        run: dotnet build TechChallenge.sln --no-restore

  unit-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore TechChallenge.sln

      - name: Build
        run: dotnet build TechChallenge.sln --no-restore

      - name: UnitTest
        run: dotnet test tests/TechChallenge.Application.UnitTests/TechChallenge.Application.UnitTests.csproj --no-build --verbosity normal

  architecture-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore TechChallenge.sln

      - name: Build
        run: dotnet build TechChallenge.sln --no-restore

      - name: ArchitectureTest
        run: dotnet test tests/TechChallenge.ArchitectureTests/TechChallenge.ArchitectureTests.csproj --no-build --verbosity normal

  integration-test:
      runs-on: ubuntu-latest
      needs: build

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Setup .NET
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: ${{ env.DOTNET_VERSION }}

        - uses: actions/cache@v3
          with:
            path: ${{ env.NUGET_PACKAGES }}
            key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
            restore-keys: |
              ${{ runner.os }}-nuget-

        - name: Restore dependencies
          run: dotnet restore TechChallenge.sln

        - name: Build
          run: dotnet build TechChallenge.sln --no-restore

        - name: IntegrationTest
          run: dotnet test tests/TechChallenge.Api.IntegrationTests/TechChallenge.Api.IntegrationTests.csproj --no-build --verbosity normal

  container-publish:
    runs-on: ubuntu-latest
    needs: [build, unit-test, architecture-test, integration-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login no Container Registry
        uses: docker/login-action@v1.6.0
        with:
          username: ${{ secrets.DOCKER_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and Push Container Artifact on Docker Hub
        run: |
          docker build . --file src/TechChallenge.Api/Dockerfile -t techchallengephase2/tech-challenge2-pipeline:latest
          docker push techchallengephase2/tech-challenge2-pipeline:latest
